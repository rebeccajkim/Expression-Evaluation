package app;

import java.io.*;
import java.util.*;
import java.util.regex.*;

import structures.Stack;

public class Expression {

	public static String delims = " \t*+-/()[]";
			
    /**
     * Populates the vars list with simple variables, and arrays lists with arrays
     * in the expression. For every variable (simple or array), a SINGLE instance is created 
     * and stored, even if it appears more than once in the expression.
     * At this time, values for all variables and all array items are set to
     * zero - they will be loaded from a file in the loadVariableValues method.
     * 
     * @param expr The expression
     * @param vars The variables array list - already created by the caller
     * @param arrays The arrays array list - already created by the caller
     */
    public static void 
    makeVariableLists(String expr, ArrayList<Variable> vars, ArrayList<Array> arrays) {
    	/** COMPLETE THIS METHOD **/
    	/** DO NOT create new vars and arrays - they are already created before being sent in
    	 ** to this method - you just need to fill them in.
    	 **/
    	StringTokenizer st=new StringTokenizer(expr,delims,true);
        String prev=" ";
        String ptr=" ";
        ArrayList<String> check=new ArrayList<String>();
        while (st.hasMoreTokens()) {
            ptr=st.nextToken();
            if(Character.isLetter(prev.charAt(0))==true && check.contains(prev)==false && ptr.equals("[")) { //not in list already //could do arrays.get(i).name==prev to see if already in arrays but then have to do for loop for everything so hopefully this just works
                Array arr=new Array(prev);
                arrays.add(arr);
                check.add(prev);
            }
            else if(Character.isLetter(prev.charAt(0))==true && check.contains(prev)==false) { //assuming if not array but still letter then var
                Variable var=new Variable(prev);
                vars.add(var);
                check.add(prev);
            }
            else if(st.countTokens()<=2 && Character.isLetter(ptr.charAt(0))==true && check.contains(ptr)==false) {
            	Variable var=new Variable(ptr);
                vars.add(var);
                check.add(ptr);
            }
            prev=ptr;
        }
    } 
    
    
    /**
     * Loads values for variables and arrays in the expression
     * 
     * @param sc Scanner for values input
     * @throws IOException If there is a problem with the input 
     * @param vars The variables array list, previously populated by makeVariableLists
     * @param arrays The arrays array list - previously populated by makeVariableLists
     */
    public static void 
    loadVariableValues(Scanner sc, ArrayList<Variable> vars, ArrayList<Array> arrays) 
    throws IOException {
        while (sc.hasNextLine()) {
            StringTokenizer st = new StringTokenizer(sc.nextLine().trim());
            int numTokens = st.countTokens();
            String tok = st.nextToken();
            Variable var = new Variable(tok);
            Array arr = new Array(tok);
            int vari = vars.indexOf(var);
            int arri = arrays.indexOf(arr);
            if (vari == -1 && arri == -1) {
            	continue;
            }
            int num = Integer.parseInt(st.nextToken());
            if (numTokens == 2) { // scalar symbol
                vars.get(vari).value = num;
            } else { // array symbol
            	arr = arrays.get(arri);
            	arr.values = new int[num];
                // following are (index,val) pairs
                while (st.hasMoreTokens()) {
                    tok = st.nextToken();
                    StringTokenizer stt = new StringTokenizer(tok," (,)");
                    int index = Integer.parseInt(stt.nextToken());
                    int val = Integer.parseInt(stt.nextToken());
                    arr.values[index] = val;              
                }
            }
        }
    }
    
    /**
     * Evaluates the expression.
     * 
     * @param vars The variables array list, with values for all variables in the expression
     * @param arrays The arrays array list, with values for all array items
     * @return Result of evaluation
     */
    public static float 
    evaluate(String expr, ArrayList<Variable> vars, ArrayList<Array> arrays) {
    	/** COMPLETE THIS METHOD **/
    	// following line just a placeholder for compilation
    	StringTokenizer st=new StringTokenizer(expr,delims,true);
    	Stack<Float> nums=new Stack<Float>(); 
    	Stack<String> oper=new Stack<String>(); 
    	Stack<Integer> arrss=new Stack<Integer>();
    	String ptr=" ";
		while(st.hasMoreTokens()) {
    		ptr=st.nextToken();
    		boolean di=false;
    		if(Character.isLetter(ptr.charAt(0))==true) { 
    			for(int n=0;n<vars.size();n++) {
					if((vars.get(n).name).equals(ptr)) {
						int oo=vars.get(n).value;
						float ou=(float)oo;
						nums.push(ou); //variable
					}
				}
    			for(int ir=0;ir<arrays.size();ir++) {
    				if((arrays.get(ir).name).equals(ptr)) {
    					arrss.push(ir);
    				}
    			}
			}
			else if(Character.isDigit(ptr.charAt(0))==true) {
				nums.push(Float.parseFloat(ptr)); //constant
			}    		    		
			else if(ptr.equals("[")) {
				oper.push(ptr);
			}
			else if(ptr.equals("]")) {
				while(!oper.peek().equals("[") && nums.size()>=2 && oper.size()>=1) {
					int ff=(int) doOp(oper.pop(),nums.pop(),nums.pop());
					float ffff=(float) arrays.get(arrss.pop()).values[ff];
					nums.push(ffff);
					di=true;
				}
				if(di==false && oper.peek().equals("[")) { 
					float fp=nums.pop(); 
					int fpp=(int) fp;
					float ffpp=(float) arrays.get(arrss.pop()).values[fpp];
					nums.push(ffpp);
				}
				oper.pop();
				di=false;
			}
    		else if(ptr.equals("(")) {
    			oper.push(ptr);
    		}
    		else if(ptr.equals(")")) {
    			while(!oper.peek().equals("(") && nums.size()>=2 && oper.size()>=1) {
    				nums.push(doOp(oper.pop(),nums.pop(),nums.pop()));
    			}
    			oper.pop();
    		}    
    		else if(ptr.equals("+") || ptr.equals("-") || ptr.equals("*") || ptr.equals("/")) {
    			while(oper.size()>=1 &&  nums.size()>=2 && doFirst(ptr,oper.peek())) {
    				float doo=doOp(oper.pop(),nums.pop(),nums.pop());
    				nums.push(doo);
    			}
    			oper.push(ptr);
    		}
    		
    	}
    	while(oper.size()>=1 && nums.size()>=2) {
    		nums.push(doOp(oper.pop(),nums.pop(),nums.pop()));
    	}
    	return nums.pop();
    }
    private static boolean doFirst(String op1,String op2) {
    	if(op2.equals("(") || op2.equals(")") || op2.equals("[") || op2.equals("]")) {
    		return false;
    	}
    	if((op1.equals("*") || op1.equals("/")) && (op2.equals("+") || op2.equals("-"))) {
    		return false;
    	}
    	else {
    		return true;
    	}
    }
    private static float doOp(String op,float second,float first) {
    	if(op.equals("+")) {
    		return first+second;
    	}
    	else if(op.equals("-")) {
    		return first-second;
    	}
    	else if(op.equals("*")) {
    		return first*second;
    	}
    	else if(op.equals("/")) {
    		//if(second==0) {
    			//throw new UnsupportedOperationException("Can't divide by zero");
    		//}
    		return first/second;
    	}
    	else {
    		return 0;
    	}
    }
}
